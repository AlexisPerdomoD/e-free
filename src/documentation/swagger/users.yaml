# src/documentation/swagger/users.yaml
swagger: '2.0'
info:
  version: '1.0.0'
  title: Users API
  description: API for users' management.
  termsOfService: 'http://swagger.io/terms/'
  contact:
    name: 'API Support'
tags:
  - name: users
    description: API for users' management.
paths:
  /api/users:
    post:
      tags:
        - users
      summary: Create a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        201:
          description: User created properly. This process also log the user in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'User created properly'
                  content:
                    $ref: '#/components/schemas/User'
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                type: object
                example: {error: 'Bad request', message: 'email already exists'}
  /api/users/login:
    post:
      description: Login a user with email and password.
      tags:
        - users
      summary: Login a user with email and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: 'testino@example.com'
                password:
                  type: string
                  example: 'Secreto132$'
      responses:
        200:
          description: User logged in properly. Session will last for 1 hour by default.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User logged in properly'
        401:
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                type: object
                example: {error: 'Unauthorized', message: 'Invalid credentials'}
        400:
          description: 'Bad request'
          content:
            application/json:
              schema:
                type: object
                example: {error: 'Bad request', message: 'the credentials were not provided correctly'}
  /api/users/logout:
    get:
      description: Logout a user. Destroy the session and log the user out.
      tags:
        - users
      summary: Logout a user.
      responses:
        200:
          description: User logged out properly.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User logged out properly'
components:
  schemas:
    UserInfo:
      type: object
      properties:
        first_name:
          type: string
          example: 'testino'
        last_name:
          type: string
          example: 'Gutierrez'
        email:
          type: string
          example: 'testino@example.com'
        password:
          type: string
          example: 'Secreto132$'
        rol:
          type: string
          enum:
            - 'usser'
            - 'admin'
            - 'premium'
          example: 'usser'
        age:
          type: number
          example: 22
    User:
      type: object
      properties:
        _id:
          type: string
          example: '5f6f5f5f5f5f5f5f5f5f5f5f324wdver63'
        first_name:
          type: string
          example: 'testino'
        last_name:
          type: string
          example: 'Gutierrez'
        email:
          type: string
          example: 'testino@example.com'
        age:
          type: number
          example: 22
        cart:
          type: string
          example: '5f6f5f5f5f5f5f5f5f5f5f5f324wdver63'
        rol:
          type: string
          enum:
            - 'usser'
            - 'admin'
            - 'premium'
          example: 'usser'
